<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.community.dao.UserMapper">
    <!--字段域的复用-->
    <sql id="insertFields">
        username, password, salt, email,type,status, activation_code, header_url, create_time
    </sql>

    <sql id="selectFields">
        id,username, password, salt, email, type, status, activation_code, header_url, create_time
    </sql>

    <!--由于selectById的参数id是简单参数类型，因此不用添加ParameterType-->
    <select id="selectById" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where id = #{id}
    </select>

    <select id="selectByName" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where username = #{username}
    </select>

    <select id="selectByEmail" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where email = #{email}
    </select>

    <!--由于insertUser的参数User，不是简单参数类型，因此要用添加ParameterType-->
    <!--而且insert和update的返回值固定是int，因此也不用强调resultType-->
    <!--关于keyProperty，由于插入User的时候没有id，此时的keyProperty是把mysql自动生成
    的id,赋值给user-->
    <insert id="insertUser" parameterType="User" keyProperty="id">
        insert into user (<include refid="insertFields"></include>)
        values(#{username}, #{password}, #{salt}, #{email}, #{type}, #{status}, #{activationCode}, #{headerUrl}, #{createTime})
    </insert>

    <update id="updateStatus">
        update user set status = #{status} where id = #{id}
    </update>

    <update id="updateHeader">
        update user set header_url = #{headerUrl} where id = #{id}
    </update>

    <update id="updatePassword">
        update user set password = #{password} where id = #{id}
    </update>



</mapper>